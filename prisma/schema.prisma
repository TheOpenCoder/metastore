generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

enum OnlineStatus {
  ONLINE
  OFFLINE
  AWAY
}

enum Currency {
  STORE
  USDT
  TFUEL
  USD
}

enum Chain {
  THETA
  ETHEREUM
  SOLANA
  POLYGON
}

enum Platform {
  WINDOWS
  MAC
  WEB
  MOBILE_WEB
}

enum Genre {
  ACTION
  ADVENTURE
  RPG
  STRATEGY
  SIMULATION
  SPORTS
  PUZZLE
  HORROR
  SHOOTER
  FIGHTING
  PLATFORMER
  RACING
  MMO
  OTHER
}

enum Features {
  SINGLE_PLAYER
  MULTI_PLAYER
  CO_OP
  CROSS_PLATFORM
  CLOUD_SAVES
  CONTROLLER_SUPPORT
  IN_GAME_PURCHASES
  ONLINE_PVP
  ONLINE_CO_OP
  LOCAL_CO_OP
  ONLINE_MULTI_PLAYER
  LOCAL_MULTI_PLAYER
}

model User {
  id                  String               @id @default(uuid())
  publicAddress       String               @unique
  nonce               Int
  username            String               @unique
  firstName           String?
  lastName            String?
  bio                 String?
  profilePicture      String?
  onlineStatus        OnlineStatus         @default(ONLINE)
  userSettings        UserSettings?
  receivedFollows     Follows[]            @relation("followee")
  sentFollows         Follows[]            @relation("follower")
  receivedRequests    Requests[]           @relation("requestee")
  sentRequests        Requests[]           @relation("requester")
  reviews             Review[]
  libraryGames        LibraryGame[]
  favouriteGames      FavoriteGame[]
  ownedAddons         Addon[]
  favoriteAddons      FavoriteAddon[]
  createdOrganization Organisation[]
  joinedOrganization  OrganisationMember[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model UserSettings {
  user                     User     @relation(fields: [userId], references: [id])
  userId                   String   @id
  isPrivate                Boolean  @default(false)
  canReceiveFriendRequests Boolean  @default(true)
  updatedAt                DateTime @updatedAt
}

model Follows {
  follower   User     @relation("follower", fields: [followerId], references: [id])
  followerId String
  followee   User     @relation("followee", fields: [followeeId], references: [id])
  followeeId String
  createdAt  DateTime @default(now())

  @@id([followerId, followeeId])
}

model Requests {
  requester   User     @relation("requester", fields: [requesterId], references: [id])
  requesterId String
  requestee   User     @relation("requestee", fields: [requesteeId], references: [id])
  requesteeId String
  createdAt   DateTime @default(now())

  @@id([requesterId, requesteeId])
}

model Game {
  id             String         @id @default(uuid())
  title          String         @unique
  slug           String         @unique
  gameUrl        String
  logo           String
  currency       Currency?      @default(STORE)
  price          Float?
  offer          Float?
  offerExpiresAt DateTime?
  tagLine        String
  platforms      Platform[]
  genres         Genre[]
  features       Features[]
  chain          Chain[]
  description    String
  publisher      String
  developer      String
  hero           String
  isSample       Boolean        @default(false)
  thumbnailImage String
  thumbnailVideo String
  ageRating      Int
  trademark      String
  carousel       String[]
  Addon          Addon[]
  achievements   Achievement[]
  reviews        Review[]
  libraryGames   LibraryGame[]
  favoriteGames  FavoriteGame[]
  organisation   Organisation   @relation(fields: [organisationId], references: [id])
  organisationId String
  releaseDate    DateTime
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model LibraryGame {
  id                     String                  @id @default(uuid())
  User                   User                    @relation(fields: [userId], references: [id])
  userId                 String
  game                   Game                    @relation(fields: [gameId], references: [id])
  gameId                 String
  libraryGamesAchivement LibraryGameAchivement[]
  isCompleted            Boolean                 @default(false)
  hoursPlayed            Int                     @default(0)
  gameProgress           Int                     @default(0)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
}

model Review {
  id        String   @id @default(uuid())
  content   String?
  rating    Int
  game      Game     @relation(fields: [gameId], references: [id])
  gameId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FavoriteGame {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  game      Game     @relation(fields: [gameId], references: [id])
  gameId    String
  createdAt DateTime @default(now())

  @@id([userId, gameId])
}

model Addon {
  id        String          @id @default(uuid())
  title     String
  image     String
  price     Float?
  currency  Currency?       @default(STORE)
  grade     String?
  game      Game            @relation(fields: [gameId], references: [id])
  gameId    String
  owner     User?           @relation(fields: [ownerId], references: [id])
  ownerId   String?
  favourite FavoriteAddon[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model FavoriteAddon {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  addon     Addon    @relation(fields: [addonId], references: [id])
  addonId   String
  createdAt DateTime @default(now())

  @@id([userId, addonId])
}

model Achievement {
  id                     String                  @id @default(uuid())
  title                  String                  @unique
  description            String
  image                  String
  grade                  String?
  game                   Game                    @relation(fields: [gameId], references: [id])
  gameId                 String
  libraryGamesAchivement LibraryGameAchivement[]
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
}

model LibraryGameAchivement {
  libraryGames   LibraryGame @relation(fields: [libraryGamesId], references: [id])
  libraryGamesId String
  achievement    Achievement @relation(fields: [achievementId], references: [id])
  achievementId  String

  @@id([libraryGamesId, achievementId])
}

model Organisation {
  id                  String               @id @default(uuid())
  name                String               @unique
  slug                String               @unique
  about               String?
  logo                String?
  games               Game[]
  creator             User                 @relation(fields: [creatorId], references: [id])
  creatorId           String
  organisationMembers OrganisationMember[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model OrganisationMember {
  organisation   Organisation @relation(fields: [organisationId], references: [id])
  organisationId String
  member         User         @relation(fields: [memberId], references: [id])
  memberId       String
  role           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@id([organisationId, memberId])
}
