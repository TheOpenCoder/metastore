type Achievement {
  id: ID!
  title: String!
  description: String!
  image: String!
  rarity: Rarity!
  game: Game!
}

type Addon {
  id: ID
  name: String
}

type Game {
  id: ID!
  title: String!
  slug: String!
  tagLine: String!
}

type UserGame {
  id: ID!
  title: String!
  slug: String!
  tagLine: String!
  userIdentifier: String!
}

type OrganisationGame {
  id: ID!
  title: String!
  slug: String!
  tagLine: String!
  organisationIdentifier: String!
}

input CreateGameInput {
  title: String!
  slug: String!
  tagLine: String!
}

type Mutation {
  createGame(input: CreateGameInput!): Game!
  registerUser(input: RegisterUserInput!): User!
  loginUser(input: LoginUserInput!): User!
  updateUser(input: UpdateUserInput!): User!
  sendFriendRequest(to: ID!): Boolean!
  cancelFriendRequest(to: ID!): Boolean!
  acceptFriendRequest(from: ID!): Boolean!
  declineFriendRequest(from: ID!): Boolean!
}

type Query {
  games: [Game!]
  userGames: [UserGame!]
  organisationGames: [OrganisationGame!]
  users(filter: UserFilterInput = {}): [User!]
  user(id: ID!): User
  me: User!
}

type Organisation {
  id: ID!
  name: String
}

enum OnlineStatus {
  ONLINE
  OFFLINE
  AWAY
}

enum Currency {
  STORE
  USDT
  TFUEL
  USD
}

enum Platform {
  WINDOWS
  MAC
  WEB
  MOBILE_WEB
}

enum Genre {
  ACTION
  ADVENTURE
  RPG
  STRATEGY
  SIMULATION
  SPORTS
  PUZZLE
  HORROR
  SHOOTER
  FIGHTING
  PLATFORMER
  RACING
  MMO
  OTHER
}

enum Feature {
  SINGLE_PLAYER
  MULTI_PLAYER
  CO_OP
  CROSS_PLATFORM
  CLOUD_SAVES
  CONTROLLER_SUPPORT
  IN_GAME_PURCHASES
  ONLINE_PVP
  ONLINE_CO_OP
  LOCAL_CO_OP
  ONLINE_MULTI_PLAYER
  LOCAL_MULTI_PLAYER
}

enum Rarity {
  COMMON
  UNCOMMON
  RARE
  EPIC
  LEGENDARY
  MYTHIC
  UNIQUE
}

input StringQueryOperatorInput {
  eq: String
  ne: String
  in: [String!]
  nin: [String!]
}

scalar Date

type Review {
  id: ID!
  user: User!
  game: Game!
  rating: Int!
  content: String
  createdAt: Date!
}

type Tournament {
  id: ID!
  name: String!
}

input RegisterUserInput {
  publicAddress: String!
  nonce: Int!
  signature: String!
  username: String!
  firstName: String
  profilePicture: String
}

input LoginUserInput {
  publicAddress: String!
  signature: String!
}

input UpdateUserInput {
  username: String
  firstName: String
  lastName: String
  bio: String
  profilePicture: String
  onlineStatus: OnlineStatus
  settings: UpdateUserSettingsInput
}

input UpdateUserSettingsInput {
  isPrivate: Boolean
  canReceiveFriendRequests: Boolean
}

input UserFilterInput {
  username: StringQueryOperatorInput
  publicAddress: StringQueryOperatorInput
  firstName: StringQueryOperatorInput
}

type User {
  id: ID!
  publicAddress: String!
  nonce: Int!
  username: String!
  firstName: String
  lastName: String
  bio: String
  profilePicture: String
  onlineStatus: OnlineStatus!
  settings: UserSettings!
  socials: UserSocials!
  games: UserGames!
  addons: UserAddons!
  organisations: UserOrganisations!
  tournaments: [Tournament!]
  achievements: [Achievement!]
  reviews: [Review!]
  metrics: UserMetrics!
  createdAt: Date!
  updatedAt: Date
}

type UserSettings {
  isPrivate: Boolean
  canReceiveFriendRequests: Boolean
}

type UserSocials {
  friends: [User!]
  friendRequests: [User!]
}

type UserGames {
  library: [Game!]
  favorite: [Game!]
}

type UserAddons {
  library: [Addon!]
  favorite: [Addon!]
}

type UserOrganisations {
  created: [Organisation!]
  joined: [Organisation!]
}

type UserMetrics {
  totalAchievements: Int
  totalHoursPlayed: Int
  totalFriends: Int
}

schema {
  query: Query
  mutation: Mutation
}